#include <math.h>
#include <avr/io.h>
#include <avr/interrupt.h>

volatile int analogResult = 0;
const int led_t = PD6;
double temp = 0.0;

double Thermistor(int RawADC) {
  double Temp;
  Temp = log(10000.0*((1024.0/RawADC-1))); 
  Temp = 1 / (0.001129148 + (0.000234125 + (0.0000000876741 * Temp * Temp ))* Temp );
  Temp = Temp - 273.15;            // Convert Kelvin to Celcius
  return Temp;
}

ISR(ADC_vect){
  analogResult = (ADCH << 8)|ADCL;
  }

void analog_init(void){
  
  //Set prescalar of 128
  ADCSRA |= (1 << ADPS2)| (1 << ADPS1)| (1 << ADPS0);
  
  //Use Vcc as reference and right adjust(ADLAR) 
  ADMUX &= ~((1<<REFS1)|(1<<REFS0)|(1<<ADLAR));
  //Single ended input on ADC1
  ADMUX |=(1<<MUX0);
  
  //Free running mode
  ADCSRB &= ~ ((1<<ADTS2)|(1<<ADTS1)|(1<<ADTS0));
  
  //Enable ADC interrupts
  ADCSRA |= (1<<ADIE);
  
  sei();
  
  //Enable ADC
  ADCSRA |= (1<<ADEN);
  //Start conversion
  ADCSRA|=(1<<ADSC);
  }

int main(){
  
  DDRD |= (1 << led_t);
  Serial.begin(115200);
  analog_init();
  while(1){
    
    temp =  Thermistor(analogResult);
    Serial.println(temp);
  
    if( temp > 40){
      Serial.println("Temperature too high!");
      PORTD |= (1 << led_t);
      }
      else {
        PORTD &= ~(1 << led_t);
        }
     //delay(500);
     ADCSRA|=(1<<ADSC);//start next conversion
    }
  
  }
